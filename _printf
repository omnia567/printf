#include <stdarg.h>
#include <unistd.h>
#include "main.h"

/**
 * _printf - Produces output according to a format.
 * @format: A character string.
 *
 * Return: The number of characters printed (excluding the null byte).
 */
int _printf(const char *format, ...)
{
    va_list args;
    int count = 0;

    if (format == NULL)
        return (-1);

    va_start(args, format);

    while (*format != '\0')
    {
        if (*format != '%')
        {
            _putchar(*format);
            count++;
        }
        else
        {
            format++;
            if (*format == 'c')
            {
                _putchar(va_arg(args, int));
                count++;
            }
            else if (*format == 's')
            {
                char *str = va_arg(args, char *);
                if (str == NULL)
                    str = "(null)";
                while (*str != '\0')
                {
                    _putchar(*str);
                    str++;
                    count++;
                }
            }
            else if (*format == '%')
            {
                _putchar('%');
                count++;
            }
            else if (*format == 'd' || *format == 'i')
            {
                int num = va_arg(args, int);
                int temp = num;

                if (num < 0)
                {
                    _putchar('-');
                    count++;
                    temp = -temp;
                }

                int divisor = 1;
                while (temp / divisor > 9)
                    divisor *= 10;

                while (divisor != 0)
                {
                    _putchar((temp / divisor) + '0');
                    count++;
                    temp %= divisor;
                    divisor /= 10;
                }
            }
            else if (*format == 'b')
            {
                unsigned int num = va_arg(args, unsigned int);
                int count_bits = 0;
                unsigned int mask = 1U << (sizeof(unsigned int) * 8 - 1);

                while (mask > 0)
                {
                    if (num & mask)
                    {
                        _putchar('1');
                        count++;
                    }
                    else
                    {
                        _putchar('0');
                        count++;
                    }
                    mask >>= 1;
                }
            }
            else if (*format == '\0')
                break;
        }
        format++;
    }

    va_end(args);

    return (count);
}

